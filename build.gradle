buildscript {
    ext  {
        mavenRepos = {
            mavenLocal()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://repo.grails.org/grails/core" }
            mavenCentral()
        }
    }

    repositories mavenRepos
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.grails.plugins:views-gradle:1.2.7'
    }
}

version "2.0.0"

group "com.causecode.plugins"

apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'

repositories mavenRepos

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // Default plugin dependencies shipped with grails 3.3.5
    compile "org.springframework.boot:spring-boot-starter-logging:1.5.12.RELEASE"
    compile "org.springframework.boot:spring-boot-autoconfigure:1.5.12.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-actuator:1.5.12.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-tomcat:1.5.12.RELEASE"

    compile "org.grails:grails-core:3.3.5"
    compile "org.grails:grails-web-boot:3.3.5"
    compile "org.grails:grails-logging:3.3.5"
    compile "org.grails:grails-plugin-rest:3.3.5"
    compile "org.grails:grails-plugin-databinding:3.3.5"
    compile "org.grails:grails-plugin-i18n:3.3.5"
    compile "org.grails:grails-plugin-services:3.3.5"
    compile "org.grails:grails-plugin-url-mappings:3.3.5"
    compile "org.grails:grails-plugin-interceptors:3.3.5"
    compile "org.grails.plugins:cache:4.0.0"
    compile "org.grails.plugins:async:3.3.2"
    compile "org.grails.plugins:scaffolding:3.4.1"
    compile "org.grails.plugins:gsp:3.3.1"

    // CauseCode Dependencies
    provided "com.causecode.plugins:nucleus:1.0.0"

    // Grails JSON Views
    provided "org.grails.plugins:views-json-templates:1.1.3"

    // Grails Plugins
    provided 'org.grails.plugins:quartz:2.0.13'
    provided 'org.grails.plugins:spring-security-core:3.2.1'
    provided "org.grails.plugins:spring-security-rest:2.0.0.M2"
    provided "org.apache.tomcat:tomcat-jdbc"
    provided "org.grails.plugins:views-json:1.2.7"


    testRuntime "org.grails.plugins:mongodb"

    testCompile "org.grails:grails-test-mixins:3.3.0"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"

    // Hibernate Dependencies
    provided "org.grails.plugins:hibernate5"

    // In memory H2 Database.
    runtime "com.h2database:h2"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacoco/jacocoHtml/"
        xml.destination "${buildDir}/jacoco/jacocoXml/jacoco.xml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/Application*/**',
                            '**/UrlMappings*/**',
                            // CustomOauthUserDetailsService 3rd party methods.
                            '**/CustomOauthUserDetailsService*/**',
                            '**/UserManagementUrlMappings*/**',
                            '**/UserManagementGrailsPlugin*/**',
                            '**/AuthenticationTokenCleanUpJob*/**',
                            '**/UserDomainMarshaller*/**',
                            '**/UserManagementBootStrap*/**'
                    ])
        })
    }

    executionData test
    dependsOn test
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'user-management'
                packaging 'jar'
                description 'This Plugin provides endpoints for User related operations.'
                url 'https://github.com/causecode/user-management'

                scm {
                    url 'scm:svn:https://github.com/causecode/user-management'
                    connection 'scm:svn:https://github.com/causecode/user-management.git'
                    developerConnection 'https://github.com:causecode/user-management.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'causecode'
                        name 'CauseCode Technologies'
                        email 'bootstrap@causecode.com'
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId "user-management"

            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
}

/*
 * This sourceSets block is required for the Grails Database Migration Plugin.
 * Refer https://github.com/grails-plugins/grails-database-migration
 */
sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
